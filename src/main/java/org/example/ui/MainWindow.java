package org.example.ui;

import org.example.algorithm.ParallelBellmanFord;
import org.example.algorithm.SequentialBellmanFord;
import org.example.model.Graph;
import org.example.ui.GraphPanel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Random;

/**
 * –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ —Ç–∞–±–æ–≤–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π:
 * - –†–µ–¥–∞–∫—Ç–æ—Ä –≥—Ä–∞—Ñ—ñ–≤ (—Ä—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)
 * - –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É (–ø–æ–∫—Ä–æ–∫–æ–≤–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è) 
 * - –ë–µ–Ω—á–º–∞—Ä–∫–∏ (–ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω—ñ –¥—ñ–∞–≥—Ä–∞–º–∏)
 * - –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø—É—Å–∫ (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å)
 */
public class MainWindow extends JFrame {
    private JTabbedPane tabbedPane;
    
    // –ü–∞–Ω–µ–ª—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    private JPanel graphEditorPanel;
    private JPanel algorithmVisualizationPanel;
    private JPanel benchmarkPanel;
    private JPanel simpleBenchmarkPanel;
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫—É (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å)
    private JTextArea outputArea;
    private JButton runButton;

    public MainWindow() {
        super("Bellman-Ford Algorithm Suite");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(900, 700);
        setLocationRelativeTo(null);
        
        initializeComponents();
        setupLayout();
    }
    
    private void initializeComponents() {
        tabbedPane = new JTabbedPane();
        
        // 1. –ü–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≥—Ä–∞—Ñ—ñ–≤
        createGraphEditorPanel();
        
        // 2. –ü–∞–Ω–µ–ª—å –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–ª–≥–æ—Ä–∏—Ç–º—É
        createAlgorithmVisualizationPanel();
        
        // 3. –ü–∞–Ω–µ–ª—å –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤
        createBenchmarkPanel();
        
        // 4. –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫—É (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞)
        createSimpleBenchmarkPanel();
    }
    
    private void createGraphEditorPanel() {
        graphEditorPanel = new JPanel(new BorderLayout());
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        JLabel titleLabel = new JLabel("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –≥—Ä–∞—Ñ—ñ–≤", JLabel.CENTER);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ–∞
        GraphPanel drawingArea = new GraphPanel();
        drawingArea.setBackground(Color.WHITE);
        drawingArea.setBorder(BorderFactory.createTitledBorder("–û–±–ª–∞—Å—Ç—å –≥—Ä–∞—Ñ–∞"));
        drawingArea.setPreferredSize(new Dimension(600, 400));
        
        // –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        JPanel toolPanel = createGraphEditorToolPanel();
        
        // –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
        JTextArea instructions = new JTextArea(
            "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:\n" +
            "‚Ä¢ –õ–ö–ú - –¥–æ–¥–∞—Ç–∏ –≤–µ—Ä—à–∏–Ω—É\n" +
            "‚Ä¢ –ü–ö–ú - –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–µ—Ä—à–∏–Ω—É/—Ä–µ–±—Ä–æ\n" +
            "‚Ä¢ –ü–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è - –∑'—î–¥–Ω–∞—Ç–∏ –≤–µ—Ä—à–∏–Ω–∏\n" +
            "‚Ä¢ –ü–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —è–∫ –¥–∂–µ—Ä–µ–ª–æ"
        );
        instructions.setEditable(false);
        instructions.setBackground(getBackground());
        instructions.setBorder(BorderFactory.createTitledBorder("–ö–µ—Ä—É–≤–∞–Ω–Ω—è"));
        
        graphEditorPanel.add(titleLabel, BorderLayout.NORTH);
        graphEditorPanel.add(drawingArea, BorderLayout.CENTER);
        graphEditorPanel.add(toolPanel, BorderLayout.SOUTH);
        graphEditorPanel.add(instructions, BorderLayout.EAST);
    }
    
    private JPanel createGraphEditorToolPanel() {
        JPanel toolPanel = new JPanel(new FlowLayout());
        
        JButton clearButton = new JButton("–û—á–∏—Å—Ç–∏—Ç–∏");
        JButton randomButton = new JButton("–í–∏–ø–∞–¥–∫–æ–≤–∏–π –≥—Ä–∞—Ñ");
        JButton loadExampleButton = new JButton("–ü—Ä–∏–∫–ª–∞–¥");
        JButton exportButton = new JButton("–ï–∫—Å–ø–æ—Ä—Ç");
        
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ–∞
        JLabel verticesLabel = new JLabel("–í–µ—Ä—à–∏–Ω:");
        JSpinner verticesSpinner = new JSpinner(new SpinnerNumberModel(5, 3, 20, 1));
        
        JLabel edgesLabel = new JLabel("–†–µ–±–µ—Ä:");
        JSpinner edgesSpinner = new JSpinner(new SpinnerNumberModel(8, 3, 50, 1));
        
        toolPanel.add(clearButton);
        toolPanel.add(new JSeparator(SwingConstants.VERTICAL));
        toolPanel.add(verticesLabel);
        toolPanel.add(verticesSpinner);
        toolPanel.add(edgesLabel);
        toolPanel.add(edgesSpinner);
        toolPanel.add(randomButton);
        toolPanel.add(loadExampleButton);
        toolPanel.add(new JSeparator(SwingConstants.VERTICAL));
        toolPanel.add(exportButton);
        
        return toolPanel;
    }
    
    private void createAlgorithmVisualizationPanel() {
        algorithmVisualizationPanel = new JPanel(new BorderLayout());
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        JLabel titleLabel = new JLabel("–ü–æ–∫—Ä–æ–∫–æ–≤–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è Bellman-Ford", JLabel.CENTER);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        
        // –û–±–ª–∞—Å—Ç—å –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
        JPanel visualizationArea = new JPanel();
        visualizationArea.setBackground(Color.WHITE);
        visualizationArea.setBorder(BorderFactory.createTitledBorder("–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É"));
        visualizationArea.setPreferredSize(new Dimension(600, 400));
        
        // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        JPanel controlPanel = createVisualizationControlPanel();
        
        // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å
        JPanel infoPanel = createVisualizationInfoPanel();
        
        algorithmVisualizationPanel.add(titleLabel, BorderLayout.NORTH);
        algorithmVisualizationPanel.add(visualizationArea, BorderLayout.CENTER);
        algorithmVisualizationPanel.add(controlPanel, BorderLayout.SOUTH);
        algorithmVisualizationPanel.add(infoPanel, BorderLayout.EAST);
    }
    
    private JPanel createVisualizationControlPanel() {
        JPanel controlPanel = new JPanel(new FlowLayout());
        
        JButton startButton = new JButton("‚ñ∂ –°—Ç–∞—Ä—Ç");
        JButton pauseButton = new JButton("‚è∏ –ü–∞—É–∑–∞");
        JButton stepButton = new JButton("‚è≠ –ö—Ä–æ–∫");
        JButton resetButton = new JButton("üîÑ –°–∫–∏–Ω—É—Ç–∏");
        
        JLabel speedLabel = new JLabel("–®–≤–∏–¥–∫—ñ—Å—Ç—å:");
        JSlider speedSlider = new JSlider(1, 10, 5);
        speedSlider.setMajorTickSpacing(3);
        speedSlider.setPaintTicks(true);
        
        JCheckBox parallelCheckBox = new JCheckBox("–ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π —Ä–µ–∂–∏–º");
        
        controlPanel.add(startButton);
        controlPanel.add(pauseButton);
        controlPanel.add(stepButton);
        controlPanel.add(resetButton);
        controlPanel.add(new JSeparator(SwingConstants.VERTICAL));
        controlPanel.add(speedLabel);
        controlPanel.add(speedSlider);
        controlPanel.add(new JSeparator(SwingConstants.VERTICAL));
        controlPanel.add(parallelCheckBox);
        
        return controlPanel;
    }
    
    private JPanel createVisualizationInfoPanel() {
        JPanel infoPanel = new JPanel(new BorderLayout());
        infoPanel.setPreferredSize(new Dimension(250, 0));
        
        // –¢–∞–±–ª–∏—Ü—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π
        String[] columnNames = {"–í–µ—Ä—à–∏–Ω–∞", "–í—ñ–¥—Å—Ç–∞–Ω—å", "–ü–æ–ø–µ—Ä–µ–¥–Ω–∏–∫"};
        Object[][] data = new Object[0][3];
        JTable distanceTable = new JTable(data, columnNames);
        JScrollPane tableScrollPane = new JScrollPane(distanceTable);
        tableScrollPane.setBorder(BorderFactory.createTitledBorder("–í—ñ–¥—Å—Ç–∞–Ω—ñ"));
        
        // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É —ñ—Ç–µ—Ä–∞—Ü—ñ—é
        JTextArea iterationInfo = new JTextArea(8, 20);
        iterationInfo.setEditable(false);
        iterationInfo.setText("–Ü—Ç–µ—Ä–∞—Ü—ñ—è: 0\n–û–±—Ä–æ–±–ª–µ–Ω–æ —Ä–µ–±–µ—Ä: 0\n–û–Ω–æ–≤–ª–µ–Ω—å: 0\n\n–û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä—Ç—É...");
        JScrollPane infoScrollPane = new JScrollPane(iterationInfo);
        infoScrollPane.setBorder(BorderFactory.createTitledBorder("–°—Ç–∞—Ç—É—Å"));
        
        infoPanel.add(tableScrollPane, BorderLayout.CENTER);
        infoPanel.add(infoScrollPane, BorderLayout.SOUTH);
        
        return infoPanel;
    }
    
    private void createBenchmarkPanel() {
        benchmarkPanel = new JPanel(new BorderLayout());
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        JLabel titleLabel = new JLabel("–ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", JLabel.CENTER);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        
        // –û–±–ª–∞—Å—Ç—å –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        JPanel chartsArea = new JPanel(new GridLayout(2, 2, 10, 10));
        chartsArea.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ (–ø–æ–∫–∏ —â–æ)
        JPanel chart1 = createChartPlaceholder("–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è vs –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—ñ–≤");
        JPanel chart2 = createChartPlaceholder("–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è vs –†–æ–∑–º—ñ—Ä –≥—Ä–∞—Ñ–∞");
        JPanel chart3 = createChartPlaceholder("–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è (Speedup)");
        JPanel chart4 = createChartPlaceholder("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å");
        
        chartsArea.add(chart1);
        chartsArea.add(chart2);
        chartsArea.add(chart3);
        chartsArea.add(chart4);
        
        // –ü–∞–Ω–µ–ª—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–Ω—á–º–∞—Ä–∫—É
        JPanel benchmarkControlPanel = createBenchmarkControlPanel();
        
        benchmarkPanel.add(titleLabel, BorderLayout.NORTH);
        benchmarkPanel.add(chartsArea, BorderLayout.CENTER);
        benchmarkPanel.add(benchmarkControlPanel, BorderLayout.SOUTH);
    }
    
    private JPanel createChartPlaceholder(String title) {
        JPanel placeholder = new JPanel(new BorderLayout());
        placeholder.setBorder(BorderFactory.createTitledBorder(title));
        placeholder.setBackground(Color.WHITE);
        
        JLabel label = new JLabel("–ì—Ä–∞—Ñ—ñ–∫ –±—É–¥–µ —Ç—É—Ç", JLabel.CENTER);
        label.setForeground(Color.GRAY);
        placeholder.add(label, BorderLayout.CENTER);
        
        return placeholder;
    }
    
    private JPanel createBenchmarkControlPanel() {
        JPanel controlPanel = new JPanel(new FlowLayout());
        
        JLabel verticesLabel = new JLabel("–î—ñ–∞–ø–∞–∑–æ–Ω –≤–µ—Ä—à–∏–Ω:");
        JSpinner minVerticesSpinner = new JSpinner(new SpinnerNumberModel(100, 10, 1000, 50));
        JLabel toLabel1 = new JLabel("–¥–æ");
        JSpinner maxVerticesSpinner = new JSpinner(new SpinnerNumberModel(1000, 100, 5000, 100));
        
        JLabel threadsLabel = new JLabel("–ú–∞–∫—Å. –ø–æ—Ç–æ–∫—ñ–≤:");
        JSpinner maxThreadsSpinner = new JSpinner(new SpinnerNumberModel(
            Runtime.getRuntime().availableProcessors(), 1, 16, 1));
        
        JLabel runsLabel = new JLabel("–ó–∞–ø—É—Å–∫—ñ–≤:");
        JSpinner runsSpinner = new JSpinner(new SpinnerNumberModel(3, 1, 10, 1));
        
        JButton runBenchmarkButton = new JButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–µ–Ω—á–º–∞—Ä–∫");
        runBenchmarkButton.setBackground(new Color(0, 150, 0));
        runBenchmarkButton.setForeground(Color.WHITE);
        
        JProgressBar progressBar = new JProgressBar();
        progressBar.setStringPainted(true);
        progressBar.setVisible(false);
        
        controlPanel.add(verticesLabel);
        controlPanel.add(minVerticesSpinner);
        controlPanel.add(toLabel1);
        controlPanel.add(maxVerticesSpinner);
        controlPanel.add(new JSeparator(SwingConstants.VERTICAL));
        controlPanel.add(threadsLabel);
        controlPanel.add(maxThreadsSpinner);
        controlPanel.add(runsLabel);
        controlPanel.add(runsSpinner);
        controlPanel.add(new JSeparator(SwingConstants.VERTICAL));
        controlPanel.add(runBenchmarkButton);
        controlPanel.add(progressBar);
        
        return controlPanel;
    }
    
    private void createSimpleBenchmarkPanel() {
        simpleBenchmarkPanel = new JPanel(new BorderLayout());
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        JLabel titleLabel = new JLabel("–ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø—É—Å–∫ (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å)", JLabel.CENTER);
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        
        // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        outputArea = new JTextArea();
        outputArea.setEditable(false);
        outputArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        JScrollPane scrollPane = new JScrollPane(outputArea);
        
        runButton = new JButton("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–µ–Ω—á–º–∞—Ä–∫");
        runButton.addActionListener(this::onRun);
        
        // –ü–∞–Ω–µ–ª—å –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        JPanel settingsPanel = new JPanel(new FlowLayout());
        settingsPanel.add(new JLabel("–í–µ—Ä—à–∏–Ω:"));
        JSpinner verticesSpinner = new JSpinner(new SpinnerNumberModel(500, 10, 2000, 50));
        settingsPanel.add(verticesSpinner);
        settingsPanel.add(new JLabel("–†–µ–±–µ—Ä:"));
        JSpinner edgesSpinner = new JSpinner(new SpinnerNumberModel(2000, 10, 10000, 100));
        settingsPanel.add(edgesSpinner);
        settingsPanel.add(runButton);
        
        simpleBenchmarkPanel.add(titleLabel, BorderLayout.NORTH);
        simpleBenchmarkPanel.add(scrollPane, BorderLayout.CENTER);
        simpleBenchmarkPanel.add(settingsPanel, BorderLayout.SOUTH);
    }
    
    private void setupLayout() {
        // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –ø–∞–Ω–µ–ª—ñ –¥–æ —Ç–∞–±—ñ–≤
        tabbedPane.addTab("üìù –†–µ–¥–∞–∫—Ç–æ—Ä", graphEditorPanel);
        tabbedPane.addTab("üé¨ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è", algorithmVisualizationPanel);
        tabbedPane.addTab("üìä –ë–µ–Ω—á–º–∞—Ä–∫–∏", benchmarkPanel);
        tabbedPane.addTab("‚ö° –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø—É—Å–∫", simpleBenchmarkPanel);
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        tabbedPane.setTabPlacement(JTabbedPane.TOP);
        
        add(tabbedPane, BorderLayout.CENTER);
        
        // –°—Ç–∞—Ç—É—Å-–±–∞—Ä
        JLabel statusBar = new JLabel("–ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏");
        statusBar.setBorder(BorderFactory.createLoweredBevelBorder());
        add(statusBar, BorderLayout.SOUTH);
    }
    
    // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    private void onRun(ActionEvent e) {
        outputArea.setText("");  // –û—á–∏—Å—Ç–∏–º–æ —Ç–µ–∫—Å—Ç–æ–≤—É –æ–±–ª–∞—Å—Ç—å

        int n = 500;   // –î–ª—è GUI –±–µ—Ä—ñ–º–æ –ø–æ–º—ñ—Ä–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
        int m = 2000;
        Graph graph = new Graph(n);
        Random rnd = new Random();

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≥—Ä–∞—Ñ —ñ–∑ –º–æ–∂–ª–∏–≤–∏–º–∏ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏
        for (int i = 0; i < m; i++) {
            int u = rnd.nextInt(n);
            int v = rnd.nextInt(n);
            int w = rnd.nextInt(100) - 50; // —Ç–µ–ø–µ—Ä –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ —Ä–µ–±—Ä–∞
            graph.addEdge(u, v, w);
        }

        int source = 0;

        // 1) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ –±—É–¥—å-—è–∫—É —ñ–∑ –≤–µ—Ä—Å—ñ–π
        outputArea.append("Checking negative cycle (sequential)‚Ä¶\n");
        SequentialBellmanFord seqCheck = new SequentialBellmanFord();
        int[] distCheck = seqCheck.findShortestPaths(graph, source);
        if (distCheck == null) {
            outputArea.append("Negative cycle detected (sequential). Aborting benchmark.\n");
            return;
        }

        outputArea.append("Checking negative cycle (parallel)‚Ä¶\n");
        ParallelBellmanFord parCheck = new ParallelBellmanFord();
        int[] distCheckPar = parCheck.findShortestPaths(graph, source);
        if (distCheckPar == null) {
            outputArea.append("Negative cycle detected (parallel). Aborting benchmark.\n");
            return;
        }

        // –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ ‚Äî —É –≥—Ä–∞—Ñ—ñ –Ω–µ–º–∞—î –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤
        outputArea.append("Running Sequential Bellman-Ford‚Ä¶\n");
        long t1 = System.currentTimeMillis();
        int[] distSeq = seqCheck.findShortestPaths(graph, source);
        long t2 = System.currentTimeMillis();
        outputArea.append("Sequential time: " + (t2 - t1) + " ms\n");

        outputArea.append("Running Parallel Bellman-Ford‚Ä¶\n");
        long t3 = System.currentTimeMillis();
        int[] distPar = parCheck.findShortestPaths(graph, source);
        long t4 = System.currentTimeMillis();
        outputArea.append("Parallel time: " + (t4 - t3) + " ms\n");

        // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ
        boolean equal = true;
        for (int i = 0; i < n; i++) {
            int dSeq = distSeq[i];
            int dPar = distPar[i];
            if (!((dSeq == Integer.MAX_VALUE && dPar == Integer.MAX_VALUE) || (dSeq == dPar))) {
                equal = false;
                outputArea.append(String.format(
                        "Mismatch at vertex %d: sequential=%s, parallel=%s%n",
                        i,
                        (dSeq == Integer.MAX_VALUE ? "INF" : dSeq),
                        (dPar == Integer.MAX_VALUE ? "INF" : dPar)
                ));
                break;
            }
        }
        outputArea.append("Results equal: " + equal + "\n");
    }

    public static void main(String[] args) {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Look and Feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π L&F
        }
        
        SwingUtilities.invokeLater(() -> {
            MainWindow window = new MainWindow();
            window.setVisible(true);
        });
    }
}